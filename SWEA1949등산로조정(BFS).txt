import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Solution {
	static int[] dy = new int[] { 0, 0, 1, -1 };
	static int[] dx = new int[] { 1, -1, 0, 0 };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		// (y, x, 남은 k, 깊이 cnt)
		// 가장 높은거 탐색 후 ArrayList에 넣기(y, x)
		// for문으로 둘러쌓고 차례로 BFS 돌리기
		// 최대 cnt 출력
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {

			String str = br.readLine();
			int N = str.charAt(0) - '0';
			int K = str.charAt(2) - '0';
			int[][] map = new int[N][N];

			// 맵 입력 받기 및 최대 높이 찾기
			int maxHeight = 0;
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
					maxHeight = Math.max(maxHeight, map[i][j]);
				}
			}

			// 가장 높은 좌표 ArrayList 저장
			ArrayList<Pos> maxList = new ArrayList<>();
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j] == maxHeight) {
						maxList.add(new Pos(i, j, 0, 0, 0, null));
					}
				}
			}

			// 최대 높이 점들 각각 BFS
			int result = 0;
			for (int maxListIdx = 0; maxListIdx < maxList.size(); maxListIdx++) {
//				System.out.println("----------------" + maxList.get(maxListIdx).y + "   " + maxList.get(maxListIdx).x
//						+ "----------------");
				Queue<Pos> q = new LinkedList<>();
				int[][] visitTmp = new int[N][N];
				visitTmp[maxList.get(maxListIdx).y][maxList.get(maxListIdx).x] = 1;
				q.add(new Pos(maxList.get(maxListIdx).y, maxList.get(maxListIdx).x, maxHeight, K, 1, visitTmp));
				while (!q.isEmpty()) {
					Pos p = q.poll();
					visitTmp = p.visit;
//					System.out.println(
//							"(" + p.y + ", " + p.x + ") : " + p.val + "     cnt : " + p.cnt + "    남은 K : " + p.k);
					result = Math.max(result, p.cnt);
					for (int i = 0; i < 4; i++) {
						int ny = p.y + dy[i];
						int nx = p.x + dx[i];
						if (nx < 0 || nx >= N || ny < 0 || ny >= N)
							continue;
						if (visitTmp[ny][nx] == 1)
							continue;
						if (map[ny][nx] < p.val) {
							int[][] visitTmp2 = new int[N][N];
							for(int k = 0 ; k < N ; k++) 
								visitTmp2[k] = visitTmp[k].clone();
							visitTmp2[ny][nx] = 1;
							q.add(new Pos(ny, nx, map[ny][nx], p.k, p.cnt + 1, visitTmp2));
							continue;
						}
						for (int j = 1; j <= p.k; j++) {
							if (map[ny][nx] - j < p.val) {
								int[][] visitTmp2 = new int[N][N];
								for(int k = 0 ; k < N ; k++) 
									visitTmp2[k] = visitTmp[k].clone();
								visitTmp2[ny][nx] = 1;
								q.add(new Pos(ny, nx, map[ny][nx] - j, 0, p.cnt + 1, visitTmp2));
								break;
							}
						}
					}
				}
			}
			System.out.println("#" + tc + " " + result);
		}
	}

	public static class Pos {
		int y, x, val, k, cnt;
		int[][] visit;

		public Pos(int y, int x, int val, int k, int cnt, int[][] visit) {
			super();
			this.y = y;
			this.x = x;
			this.val = val;
			this.k = k;
			this.cnt = cnt;
			this.visit = visit;
		}

	}
}
