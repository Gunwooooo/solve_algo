import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Solution {
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringTokenizer st;
		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());
			int K = Integer.parseInt(st.nextToken());
			int[][] map = new int[N][N];
			int[][] visit = new int[N][N];
			String str;
			for (int i = 0; i < N; i++) {
				str = br.readLine();
				for (int j = 0; j < N; j++) {
					map[i][j] = str.charAt(j * 2) - '0';
				}
			}

			int result = 0;
			forbreak: for (int i = 0; i < N; i++) {
				for (int j = 0; j < N - 1; j++) {
					int gap = map[i][j + 1] - map[i][j];
					if (gap == 0) {
						continue;
					}
					if (Math.abs(gap) > 1) {
						continue forbreak;
					}
					if (gap == 1) {
						for (int k = 1; k <= K - 1; k++) {
							if (j - k < 0) {
								continue forbreak;
							}
							if (visit[i][j - k] == 1 || map[i][j - k] != map[i][j]) {
								continue forbreak;
							}
						}
						for (int k = 0; k < K; k++) {
							visit[i][j - k] = 1;
						}
					}
					if (gap == -1) {
						for (int k = 2; k <= K; k++) {
							if (j + k >= N) {
								continue forbreak;
							}
							if (map[i][j + k] != map[i][j + 1]) {
								continue forbreak;
							}
						}
						for (int k = 1; k <= K; k++) {
							visit[i][j + k] = 1;
						}
					}
				}
				result++;
			}
			visit = new int[N][N];
			forbreak: for (int i = 0; i < N; i++) {
				for (int j = 0; j < N - 1; j++) {
					int gap = map[j + 1][i] - map[j][i];
					if (gap == 0) {
						continue;
					}
					if (Math.abs(gap) > 1) {
						continue forbreak;
					}
					if (gap == 1) {
						for (int k = 1; k <= K - 1; k++) {
							if (j - k < 0) {
								continue forbreak;
							}
							if (visit[j - k][i] == 1 || map[j - k][i] != map[j][i]) {
								continue forbreak;
							}
						}
						for (int k = 0; k < K; k++) {
							visit[j - k][i] = 1;
						}
					}
					if (gap == -1) {
						for (int k = 2; k <= K; k++) {
							if (j + k >= N) {
								continue forbreak;
							}
							if (map[j + k][i] != map[j + 1][i]) {
								continue forbreak;
							}
						}
						for (int k = 1; k <= K; k++) {
							visit[j + k][i] = 1;
						}
					}
				}
				result++;
			}
			sb.append("#" + tc + " " + result + "\n");
		}
		System.out.println(sb.toString());
	}
}
