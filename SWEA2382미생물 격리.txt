import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Solution {
	// 상:1 하:2 좌:3 우:4
	static int N;
	static int[] dy = new int[] { 0, -1, 1, 0, 0 };
	static int[] dx = new int[] { 0, 0, 0, -1, 1 };
	static StringBuffer sb = new StringBuffer();

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringTokenizer st;
		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			int K = Integer.parseInt(st.nextToken());
			ArrayList<Pos> list = new ArrayList<>();
			for (int i = 0; i < K; i++) {
				st = new StringTokenizer(br.readLine());
				int y = Integer.parseInt(st.nextToken());
				int x = Integer.parseInt(st.nextToken());
				int cnt = Integer.parseInt(st.nextToken());
				int dir = Integer.parseInt(st.nextToken());
				list.add(new Pos(y, x, cnt, dir));
			}

			for (int time = 0; time < M; time++) {
				for (int i = 0; i < list.size(); i++) {
					int ny = list.get(i).y + dy[list.get(i).dir];
					int nx = list.get(i).x + dx[list.get(i).dir];
					int ncnt = list.get(i).cnt;
					int ndir = list.get(i).dir;
					if (ny == 0 || ny == N - 1 || nx == 0 || nx == N - 1) {
						ncnt /= 2;
						if (ncnt == 0) {
							list.remove(i);
							i--;
							continue;
						}
						ndir = changeDir(ndir);
					}
					list.get(i).y = ny;
					list.get(i).x = nx;
					list.get(i).cnt = ncnt;
					list.get(i).dir = ndir;
				}
				Collections.sort(list);
				for (int i = 0; i < list.size() - 1; i++) {
					if (list.get(i).y == list.get(i + 1).y && list.get(i).x == list.get(i + 1).x) {
						list.get(i + 1).cnt += list.get(i).cnt;
						list.remove(i);
						i--;
					}
				}

			}
			int result = 0;
			for (int i = 0; i < list.size(); i++) {
				result += list.get(i).cnt;
			}
			sb.append("#" + tc + " " + result + "\n");
		}
		System.out.println(sb.toString());
	}

	private static int changeDir(int dir) {
		switch (dir) {
		case 1:
			return 2;
		case 2:
			return 1;
		case 3:
			return 4;
		case 4:
			return 3;
		default:
			return 0;
		}
	}

	static class Pos implements Comparable<Pos> {
		int y, x, cnt, dir;

		public Pos(int y, int x, int cnt, int dir) {
			super();
			this.y = y;
			this.x = x;
			this.cnt = cnt;
			this.dir = dir;
		}

		@Override
		public int compareTo(Pos o) {
			if ((this.y * N + this.x) == (o.y * N + o.x)) {
				return this.cnt - o.cnt;
			}
			return (this.y * N + this.x) - (o.y * N + o.x);
		}
	}
}
