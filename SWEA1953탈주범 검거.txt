import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Solution {
	// 상:0 좌:1 하:2 우:3
	static int[] dy = new int[] { -1, 0, 1, 0 };
	static int[] dx = new int[] { 0, -1, 0, 1 };
	static int[] p1 = new int[] { 0, 1, 2, 3 };
	static int[] p2 = new int[] { 0, 2 };
	static int[] p3 = new int[] { 1, 3 };
	static int[] p4 = new int[] { 0, 3 };
	static int[] p5 = new int[] { 2, 3 };
	static int[] p6 = new int[] { 1, 2 };
	static int[] p7 = new int[] { 0, 1 };
	static int[][] pArr = new int[][] { null, p1, p2, p3, p4, p5, p6, p7 };
	static int[][] dirArr = new int[][] { { 1, 2, 5, 6 }, { 1, 3, 4, 5 }, { 1, 2, 4, 7 }, { 1, 3, 6, 7 } };

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringTokenizer st;
		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			int R = Integer.parseInt(st.nextToken());
			int C = Integer.parseInt(st.nextToken());
			int L = Integer.parseInt(st.nextToken());

			int[][] map = new int[N][M];
			int[][] visit = new int[N][M];

			String str;
			for (int i = 0; i < N; i++) {
				str = br.readLine();
				for (int j = 0; j < M; j++) {
					map[i][j] = str.charAt(j * 2) - '0';
				}
			}

			Queue<Pos> q = new LinkedList<>();
			visit[R][C] = 1;
			q.add(new Pos(R, C, 1));
			int result = 0;
			while (!q.isEmpty()) {
				Pos p = q.poll();
				if (p.cnt <= L) {
					result++;
				}
				int idx = map[p.y][p.x];
				int forSize = pArr[idx].length;
				for (int i = 0; i < forSize; i++) {
					int ny = p.y + dy[pArr[idx][i]];
					int nx = p.x + dx[pArr[idx][i]];
					if (ny < 0 || ny >= N || nx < 0 || nx >= M)
						continue;
					if (map[ny][nx] == 0 || visit[ny][nx] == 1)
						continue;
					int flag = 0;
					for (int j = 0; j < 4; j++) {
						if (dirArr[pArr[idx][i]][j] == map[ny][nx]) {
							flag = 1;
							break;
						}
					}
					if (flag == 0)
						continue;
					visit[ny][nx] = 1;
					q.add(new Pos(ny, nx, p.cnt + 1));
				}
			}
			System.out.printf("#%d %d\n", tc, result);
		}
	}

	static class Pos {
		int y, x, cnt;

		public Pos(int y, int x, int cnt) {
			super();
			this.y = y;
			this.x = x;
			this.cnt = cnt;
		}

	}
}
