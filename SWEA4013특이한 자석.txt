import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Solution {
	static int[] d = new int[] { -1, 1 };
	static int[][] map;
	static int[] valArr = new int[] { 1, 2, 4, 8 };
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringTokenizer st;
		for (int tc = 1; tc <= T; tc++) {
			int K = Integer.parseInt(br.readLine());
			String str;
			map = new int[4][8];
			ArrayList<Pos> list = new ArrayList<>();
			int[] arr = new int[] { 1, 1, 1, 1, 1, 1, 1 };
			for (int i = 0; i < 4; i++) {
				str = br.readLine();
				for (int j = 0; j < 8; j++) {
					map[i][j] = str.charAt(j * 2) - '0';
				}
			}
			for (int i = 0; i < K; i++) {
				st = new StringTokenizer(br.readLine());
				int n = (Integer.parseInt(st.nextToken()) - 1) * 2;
				int dir = Integer.parseInt(st.nextToken());
				list.add(new Pos(n, dir));
			}

			for (int k = 0; k < K; k++) {
				Queue<Pos> q = new LinkedList<>();
				int[] visit = new int[7];
				for (int i = 0; i < 3; i++) {
					if (map[i][2] != map[i + 1][6])
						arr[(i * 2 + 1)] = 1;
					else
						arr[(i * 2 + 1)] = 0;
				}
				q.add(new Pos(list.get(k).n, list.get(k).dir));
				visit[list.get(k).n] = 1;
				while (!q.isEmpty()) {
					Pos p = q.poll();
					if (p.n % 2 == 0) {
						moveArr(p.n / 2, p.dir);
					}
					for (int i = 0; i < 2; i++) {
						int nn = p.n + d[i];
						if (nn < 0 || nn >= 7)
							continue;
						if (visit[nn] == 1 || arr[nn] == 0)
							continue;
						visit[nn] = 1;
						if (nn % 2 == 1) {
							q.add(new Pos(nn, p.dir));
							continue;
						}
						if (p.dir == 1)
							q.add(new Pos(nn, -1));
						else
							q.add(new Pos(nn, 1));
					}
				}
			}
			int result = 0;
			for (int i = 0; i < 4; i++) {
				result += valArr[i] * map[i][0];
			}
			sb.append("#" + tc + " " + result + "\n");
		}
		System.out.println(sb.toString());
	}

	private static void moveArr(int nn, int dir) {
		switch (dir) {
		case 1:
			int tmp1 = map[nn][7];
			for (int i = 7; i >= 1; i--) {
				map[nn][i] = map[nn][i - 1];
			}
			map[nn][0] = tmp1;
			break;
		case -1:
			int tmp2 = map[nn][0];
			for (int i = 0; i < 7; i++) {
				map[nn][i] = map[nn][i + 1];
			}
			map[nn][7] = tmp2;
			break;
		}
	}

	static class Pos {
		int n, dir;

		public Pos(int n, int dir) {
			super();
			this.n = n;
			this.dir = dir;
		}
	}
}
