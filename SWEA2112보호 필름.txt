import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Solution {
	static int N, M, K;
	static int[][] map;
	static int[] visit;
	static int result;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			K = Integer.parseInt(st.nextToken());
			map = new int[N][M];
			visit = new int[N];
			String str;
			result = K;
			for (int i = 0; i < N; i++) {
				str = br.readLine();
				for (int j = 0; j < M; j++) {
					map[i][j] = str.charAt(j * 2) - '0';
				}
			}
			dfs(0, 0);
			System.out.printf("#%d %d\n", tc, result);
		}
	}

	private static void dfs(int n, int cnt) {
		if (cnt >= K)
			return;
		int flag = 0;
		forbreak2: for (int i = 0; i < M; i++) {
			int flag2 = 0;
			forbreak: for (int j = 0; j < N - K + 1; j++) {

				int val1 = map[j][i];
				if (visit[j] != 0) {
					val1 = visit[j] - 1;
				}
				int step = 0;
				for (int k = 1; k <= K - 1; k++) {
					int val2 = map[j + k][i];
					if (visit[j + k] != 0) {
						val2 = visit[j + k] - 1;
					}
					if (val1 != val2) {
						continue forbreak;
					}
					step++;
				}
				if (step == K - 1) {
					flag2 = 1;
					flag++;
					continue forbreak2;
				}
			}
			if (flag2 == 0)
				break;
		}
		if (flag == M) {
			result = Math.min(result, cnt);
		}
		for (int i = n; i < N; i++) {
			if (visit[i] == 0) {
				for (int j = 1; j <= 2; j++) {
					visit[i] = j;
					dfs(i, cnt + 1);
					visit[i] = 0;
				}
			}
		}
	}
}
