import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Solution {
	static int[] dy = new int[] { 0, 0, 1, -1 };
	static int[] dx = new int[] { 1, -1, 0, 0 };
	static int N, K;
	static int[][] map, visit;
	static int result = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		// (y, x, 남은 k, 깊이 cnt)
		// 가장 높은거 탐색 후 ArrayList에 넣기(y, x)
		// for문으로 둘러쌓고 차례로 BFS 돌리기
		// 최대 cnt 출력
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {

			String str = br.readLine();
			N = str.charAt(0) - '0';
			K = str.charAt(2) - '0';
			map = new int[N][N];
			visit = new int[N][N];
			result = 0;
			// 맵 입력 받기 및 최대 높이 찾기
			int maxHeight = 0;
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
					maxHeight = Math.max(maxHeight, map[i][j]);
				}
			}

			// 가장 높은 좌표 ArrayList 저장
			ArrayList<Pos> maxList = new ArrayList<>();
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j] == maxHeight) {
						maxList.add(new Pos(i, j));
					}
				}
			}

			for (int i = 0; i < maxList.size(); i++) {
				visit[maxList.get(i).y][maxList.get(i).x] = 1;
//				System.out.printf("------%d, %d-------\n", maxList.get(i).y, maxList.get(i).x);
				dfs(maxList.get(i).y, maxList.get(i).x, 1, 0, map[maxList.get(i).y][maxList.get(i).x]);
				visit[maxList.get(i).y][maxList.get(i).x] = 0;
			}
			System.out.println("#" + tc + " " + result);
		}
	}

	private static void dfs(int y, int x, int cnt, int flag, int mapValue) {
		result = Math.max(result, cnt);
//		System.out.printf("(%d, %d)    cnt : %d     flag : %d   current MapVal : %d\n", y, x, cnt, flag, mapValue);
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (ny < 0 || ny >= N || nx < 0 || nx >= N)
				continue;
			if (visit[ny][nx] == 1)
				continue;
			if (map[ny][nx] < mapValue) {
				visit[ny][nx] = 1;
				dfs(ny, nx, cnt + 1, flag, map[ny][nx]);
				visit[ny][nx] = 0;
			} else if (flag == 0) {
				for (int j = 1; j <= K; j++) {
					if (map[ny][nx] - j < mapValue) {
						visit[ny][nx] = 1;
						dfs(ny, nx, cnt + 1, 1, map[ny][nx] - j);
						visit[ny][nx] = 0;
						break;
					}
				}
			} else {
				continue;
			}
		}
	}

	static class Pos {
		int y, x;

		public Pos(int y, int x) {
			super();
			this.y = y;
			this.x = x;
		}
	}
}
